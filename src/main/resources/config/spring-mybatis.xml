<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-3.2.xsd">

	<!-- mybatis文件配置，扫描所有mapper文件 -->
	<!-- configLocation为mybatis属性 mapperLocations为所有mapper -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource" p:configLocation="classpath:config/mybatis-config.xml"
		p:mapperLocations="classpath:mapper/**/*.xml" />

	<!-- spring与mybatis整合配置，扫描所有dao -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:basePackage="com.wcj.wb.*.dao" p:sqlSessionFactoryBeanName="sqlSessionFactory" />

	<!-- 对数据源进行事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
		
	 <!-- 主库数据源 -->
     <bean id="writeDataSource" class="com.jolbox.bonecp.BoneCPDataSource"  destroy-method="close">
        <property name="driverClass" value="${system.jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.write.url}"/>
        <property name="username" value="${jdbc.write.uname}"/>
        <property name="password" value="${jdbc.write.pwd}"/>
        <property name="partitionCount" value="4"/>
        <property name="releaseHelperThreads" value="3"/>
        <property name="acquireIncrement" value="2"/>
        <property name="maxConnectionsPerPartition" value="40"/>
        <property name="minConnectionsPerPartition" value="20"/>
        <property name="idleMaxAgeInSeconds" value="60"/>
        <property name="idleConnectionTestPeriodInSeconds" value="60"/>
        <property name="poolAvailabilityThreshold" value="5"/>
    </bean>
    
    <!-- 从库数据源 -->
    <bean id="readDataSource" class="com.jolbox.bonecp.BoneCPDataSource"  destroy-method="close">
        <property name="driverClass" value="${system.jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.read.url}"/>
        <property name="username" value="${jdbc.read.uname}"/>
        <property name="password" value="${jdbc.read.pwd}"/>
        <property name="partitionCount" value="4"/>
        <property name="releaseHelperThreads" value="3"/>
        <property name="acquireIncrement" value="2"/>
        <property name="maxConnectionsPerPartition" value="40"/>
        <property name="minConnectionsPerPartition" value="20"/>
        <property name="idleMaxAgeInSeconds" value="60"/>
        <property name="idleConnectionTestPeriodInSeconds" value="60"/>
        <property name="poolAvailabilityThreshold" value="5"/>
    </bean>

    <!-- 注解自动载入 -->
    <context:annotation-config />

    <!--enale component scanning (beware that this does not enable mapper scanning!)-->
    <context:component-scan base-package="com.wcj.wb.*.service">
     <context:include-filter type="annotation"  
            expression="org.springframework.stereotype.Component" />
    </context:component-scan>

    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven />
    
    <bean id="dataSource" class="com.wcj.framework.datasource.ChooseDataSource">
        <property name="targetDataSources">  
              <map key-type="java.lang.String">  
                  <!-- write -->
                 <entry key="write" value-ref="writeDataSource"/>  
                 <!-- read -->
                 <entry key="read" value-ref="readDataSource"/>  
              </map>
        </property>  
        <property name="defaultTargetDataSource" ref="writeDataSource"/> 
    </bean>
      
    <!-- 激活自动代理功能 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    
    <!-- 配置数据库注解aop -->
    <bean id="dataSourceAspect" class="com.wcj.framework.datasource.DataSourceAspect" />
    <aop:config>
        <aop:aspect id="c" ref="dataSourceAspect">
            <aop:pointcut id="tx" expression="execution(* com.wcj.wb.*.service..*.*(..))"/>
            <aop:before pointcut-ref="tx" method="before"/>
        </aop:aspect>
    </aop:config>
    
</beans>